import java.security.spec.InvalidKeySpecException

ext {
    VERSION_NAME = simpleReleaseVersionName()
    VERSION_CODE = commitCount()
    CANONICAL_VERSION_NAME = canonicalReleaseVersionName()
    BRANCH_NAME = branchName()
    COMMIT_HASH = commitHash()
    isLocal = project.rootProject.file('local.properties').exists()
    isLocal = project.rootProject.file('local.properties').exists()
    isTesting = false
    BUILD_TIME = new Date().getTime()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

android {

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId APPLICATION_ID
        multiDexEnabled true

        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode VERSION_CODE
        versionName VERSION_NAME
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(CANONICAL_VERSION_NAME)
        buildConfigField "String", "COMMIT_HASH", escape(COMMIT_HASH)
        buildConfigField "String", "BRANCH", escape(BRANCH_NAME)
        buildConfigField "String", "BUILD_DATE", escape(BUILD_TIME)
        buildConfigField "String", "VSC", escape(VSC_PATH)
        buildConfigField "boolean", "IS_LOCAL", escape(isLocal)
        buildConfigField "boolean", "IS_CI", escape(isCi)
        buildConfigField "boolean", "TESTING", escape(isTesting)

        resConfigs "de"
        manifestPlaceholders += [
                crashlyticsEnabled: false
        ]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    // region signing configs

//    signingConfigs {
//        try {
//            debug {
//                storeFile file(DEBUG_KEYSYORE_PATH)
//                storePassword DEBUG_STORE_PASSWORD
//                keyAlias DEBUG_KEYSTORE_ALLIAS
//                keyPassword DEBUG_KEY_PASSWORD
//            }
//        }
//        catch (final ignored) {
//           // new InvalidKeySpecException('You should define DEBUG_KEYSTORE_ALLIAS, DEBUG_STORE_PASSWORD, DEBUG_KEY_PASSWORD in gradle.properties.')
//        }
//        try {
//            release {
//                storeFile file(RELEASE_KEYSYORE_PATH)
//                storePassword RELEASE_STORE_PASSWORD
//                keyAlias RELEASE_KEYSTORE_ALIAS
//                keyPassword RELEASE_KEY_PASSWORD
//            }
//        } catch (final ignored) {
//            // new InvalidKeySpecException('You should define RELEASE_KEYSTORE_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD in gradle.properties.')
//        }
//    }

    // endregion

    buildTypes {
        debug {
            // signingConfig signingConfigs.debug
            applicationIdSuffix ""
            pseudoLocalesEnabled true
            debuggable true
            minifyEnabled false
            crunchPngs false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
        }

        release {
            // signingConfig signingConfigs.release
            pseudoLocalesEnabled false
            debuggable false
            minifyEnabled true
            crunchPngs true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders += [crashlyticsEnabled: true]
        }
    }


    // region java compiler flags

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // endregion

    // region lint options

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
    }

    // endregion

    // region dex options

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    // endregion

    // region adb options

    adbOptions {
        timeOutInMs 10 * 60 * 1000 // 10 minutes
    }

    // endregion
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':lib')

    implementation libs.kotlinJdk8

    // frequently used convenient methods
    implementation libs.exozetCore

    // presenter
    implementation libs.recyclerViewPresenter4

    implementation libs.supportMultidex
    implementation libs.supportAppCompat
    implementation libs.appCompatResources
    implementation libs.androidKtxCore
    implementation libs.activityKtx
    implementation libs.fragmentKtx
    implementation libs.supportDesign
    implementation libs.constraintLayout2
    implementation libs.supportRecyclerview

    // recyclerview animations
    implementation libs.recyclerviewAnimators

    // recyclerview overscroll effect
    implementation 'me.everything:overscroll-decor-android:1.0.3'

    // fonts
    implementation libs.calligraphy

    // crouton notifications
    implementation('de.keyboardsurfer.android.widget:crouton:1.8.5@aar') {
        exclude group: 'com.google.android', module: 'support-v4'
    }

    // chart
    implementation libs.graphView

    // fabric
    implementation(libs.crashlytics) {
        transitive = true
    }

    // auto resizing text views
    implementation 'me.grantland:autofittextview:0.2.1'

    // fancy time calculations
    implementation libs.joda

    // permissions
    implementation libs.permissionDispatcher
    kapt libs.permissionDispatcherProcessor

    // butterknife
    implementation libs.butterknifeX
    kapt libs.butterknifeCompilerX

    // detecting memory leaks
    debugImplementation libs.leakcanaryDebug
    debugImplementation libs.leakcanaryDebugSupportFragments
    releaseImplementation libs.leakcanaryRelease

    implementation(libs.materialdrawer) {
        transitive = true
    }

    // force update
    implementation libs.googlePlayForceUpdate

    implementation libs.logger
}

// region override support library version

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}

// endregion

static def escape(Object value) {
    return "\"$value\""
}

static def escape(boolean value) {
    return "$value"
}